{"version":3,"sources":["../src/app.ts","../src/handlers/user.ts","../src/schemas/requests/createUser.ts","../src/utils.ts","../src/handlers/account.ts","../src/schemas/requests/getBalance.ts","../src/schemas/requests/postDeposit.ts","../src/const/const.ts","../src/schemas/requests/postTransfer.ts","../src/error.ts","../src/repo/account.ts","../src/repo/user.ts","../src/repo/index.ts","../src/db/index.ts","../src/index.ts"],"sourcesContent":["import express from 'express';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport cors from 'cors';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport YAML from 'yamljs';\r\nimport makeUser from './handlers/user';\r\nimport makeAccount from './handlers/account';\r\nimport { Repo } from './repo';\r\n\r\nconst makeApp = ({ repo }: { repo: Repo }) => {\r\n  const app = express();\r\n\r\n  app.use(compression());\r\n\r\n  app.use(helmet());\r\n\r\n  app.use(express.json());\r\n\r\n  app.use(cors({ origin: '*' }));\r\n\r\n  app.use(\r\n    '/reference',\r\n    swaggerUi.serve,\r\n    swaggerUi.setup(YAML.load(process.cwd() + '/docs/swagger.yml'))\r\n  );\r\n\r\n  app.get('/', (req, res) => {\r\n    res.send({\r\n      msg: 'Welcome to waficode',\r\n    });\r\n  });\r\n\r\n  app.use('/users', makeUser({ repo }));\r\n\r\n  app.use('/accounts', makeAccount({ repo }));\r\n\r\n  return app;\r\n};\r\n\r\nexport { makeApp };\r\n","import { Router } from 'express';\r\nimport { ZodError } from 'zod';\r\nimport { Repo } from '../repo';\r\nimport { CreateUserRequestSchema } from '../schemas/requests/createUser';\r\nimport { Response } from '../types';\r\nimport { generateId } from '../utils';\r\n\r\nconst makeUser = ({ repo }: { repo: Repo }) => {\r\n  const router = Router();\r\n\r\n  router.post<{}, Response>('/', (req, res) => {\r\n    const user = { ...req.body, id: generateId() };\r\n\r\n    try {\r\n      CreateUserRequestSchema.parse(user);\r\n    } catch (err) {\r\n      return res\r\n        .status(400)\r\n        .send({ validationError: (err as ZodError).issues });\r\n    }\r\n\r\n    repo.user.addUser(user);\r\n\r\n    repo.account.createAccount({ id: generateId(), userId: user.id, balance: 0, subwallets: { usd: 0, ngn: 0, gdp: 0, yuan: 0} });\r\n\r\n    res.send({ data: user });\r\n  });\r\n\r\n  return router;\r\n};\r\n\r\nexport default makeUser;","import { z } from \"zod\";\r\n\r\nexport const CreateUserRequestSchema = z.object({ name: z.string(), id: z.string() }).strict();\r\n\r\nexport type CreateUserRequest = z.infer<typeof CreateUserRequestSchema>;","import { nanoid } from 'nanoid';\r\nimport { Currency } from './const/const';\r\nimport { Account } from './schemas/models/Account';\r\n\r\nexport const generateId = () => {\r\n  return nanoid();\r\n};\r\n\r\nconst rates = { usd: 1, ngn: 415, gdp: 0.86, yuan: 6.89 };\r\n\r\nexport const TransferFund = (\r\n  senderAccount: Account,\r\n  amount: number,\r\n  currency: Currency\r\n) => {\r\n  const account = senderAccount;\r\n\r\n  if (account.subwallets[currency] >= amount) {\r\n    account.subwallets[currency] = account.subwallets[currency] - amount;\r\n    return { account: account, balance: 0 };\r\n  }\r\n\r\n  // convert all wallet amount to baseline usd\r\n\r\n  const tempWallets = {\r\n    ngn: convertToUsd({ currency: 'ngn', amount: account.subwallets.ngn })\r\n      .amount,\r\n    gdp: convertToUsd({ currency: 'gdp', amount: account.subwallets.gdp })\r\n      .amount,\r\n    yuan: convertToUsd({ currency: 'yuan', amount: account.subwallets.yuan })\r\n      .amount,\r\n    usd: convertToUsd({ currency: 'usd', amount: account.subwallets.usd })\r\n      .amount,\r\n  };\r\n\r\n  const amountInUsd = convertToUsd({ amount, currency }).amount;\r\n\r\n  let balance = amountInUsd - tempWallets[currency];\r\n\r\n  tempWallets[currency] = 0;\r\n\r\n  for (const key in tempWallets) {\r\n    if (key === currency) continue;\r\n\r\n    if (tempWallets[key as Currency] >= balance) {\r\n      tempWallets[key as Currency] -= balance;\r\n\r\n      balance = 0;\r\n\r\n      break;\r\n    }\r\n\r\n    balance -= tempWallets[key as Currency];\r\n\r\n    tempWallets[key as Currency] = 0;\r\n  }\r\n\r\n  console.log(balance, \"balance before final check\");\r\n\r\n  if (balance > 0) {\r\n    return { account: account, balance: balance };\r\n  } else {\r\n    account.subwallets.gdp = convertFromUsd({\r\n      amount: tempWallets.gdp,\r\n      currency: 'gdp',\r\n    }).amount;\r\n    account.subwallets.usd = convertFromUsd({\r\n      amount: tempWallets.usd,\r\n      currency: 'usd',\r\n    }).amount;\r\n    account.subwallets.yuan = convertFromUsd({\r\n      amount: tempWallets.yuan,\r\n      currency: 'yuan',\r\n    }).amount;\r\n    account.subwallets.ngn = convertFromUsd({\r\n      amount: tempWallets.ngn,\r\n      currency: 'ngn',\r\n    }).amount;\r\n\r\n    return { account: account, balance: 0 };\r\n  }\r\n};\r\n\r\nconst convertToUsd = (to: { amount: number; currency: Currency }) => {\r\n  return {\r\n    currency: 'usd',\r\n    amount: Number((to.amount / rates[to.currency]).toFixed(2)),\r\n  };\r\n};\r\n\r\nconst convertFromUsd = (from: { amount: number; currency: Currency }) => {\r\n  return {\r\n    currency: from.currency,\r\n    amount: Number((from.amount * rates[from.currency]).toFixed(2)),\r\n  };\r\n};\r\n","import { Router } from 'express';\r\nimport { ZodError } from 'zod';\r\nimport { AppError } from '../error';\r\nimport { Repo } from '../repo';\r\nimport {\r\n  GetBalanceRequest,\r\n  GetBalanceRequestSchema,\r\n} from '../schemas/requests/getBalance';\r\nimport {\r\n  PostDepositRequest,\r\n  PostDepositRequestSchema,\r\n} from '../schemas/requests/postDeposit';\r\nimport {\r\n  PostTransferRequest,\r\n  PostTransferRequestSchema,\r\n} from '../schemas/requests/postTransfer';\r\nimport { Response } from '../types';\r\n\r\nconst makeAccount = ({ repo }: { repo: Repo }) => {\r\n  const router = Router();\r\n\r\n  router.post<{}, Response, PostDepositRequest>('/deposit', (req, res) => {\r\n    try {\r\n      PostDepositRequestSchema.parse(req.body);\r\n    } catch (err) {\r\n      return res\r\n        .status(400)\r\n        .send({ validationError: (err as ZodError).issues });\r\n    }\r\n\r\n    const user = repo.user.getUserById(req.body.userId);\r\n\r\n    if (!user) {\r\n      return res.status(404).send({\r\n        msg: 'User not found',\r\n      });\r\n    }\r\n\r\n    try {\r\n      const accocunt = repo.account.makeDeposit(req.body);\r\n\r\n      res.status(201).send({ data: accocunt });\r\n      return;\r\n    } catch (err) {\r\n      res.status((err as AppError).code).send({\r\n        msg: (err as AppError).msg,\r\n      });\r\n    }\r\n  });\r\n\r\n  router.post<{}, Response, PostTransferRequest>('/transfer', (req, res) => {\r\n    try {\r\n      PostTransferRequestSchema.parse(req.body);\r\n    } catch (err) {\r\n      return res\r\n        .status(400)\r\n        .send({ validationError: (err as ZodError).issues });\r\n    }\r\n\r\n    try {\r\n      const account = repo.account.makeTransfer(req.body);\r\n      res.status(201).send({ data: account, msg: 'Transfer successful' });\r\n    } catch (err) {\r\n      res.status((err as AppError).code).send({\r\n        msg: (err as AppError).msg,\r\n      });\r\n    }\r\n  });\r\n\r\n  router.get<GetBalanceRequest, Response>('/balance/:userId', (req, res) => {\r\n    try {\r\n      GetBalanceRequestSchema.parse(req.params);\r\n    } catch (err) {\r\n      return res\r\n        .status(400)\r\n        .send({ validationError: (err as ZodError).issues });\r\n    }\r\n\r\n    try {\r\n      const account = repo.account.getAccountByUserId(req.params.userId);\r\n      res.status(200).send({ data: account });\r\n    } catch (err) {\r\n      res.status((err as AppError).code).send({\r\n        msg: (err as AppError).msg,\r\n      });\r\n    }\r\n  });\r\n\r\n  return router;\r\n};\r\n\r\nexport default makeAccount;\r\n","import { z } from \"zod\";\r\n\r\nexport const GetBalanceRequestSchema = z.object({\r\n    userId: z.string()\r\n}).strict();\r\n\r\nexport type GetBalanceRequest = z.infer<typeof GetBalanceRequestSchema>;","import { z } from \"zod\";\r\nimport {CURRENCY} from \"../../const/const\";\r\n\r\nexport const PostDepositRequestSchema = z.object({ amount: z.number().positive(), userId: z.string(), currency: z.nativeEnum(CURRENCY) }).strict();\r\n\r\nexport type PostDepositRequest = z.infer<typeof PostDepositRequestSchema>;","export const CURRENCY = { USD: 'usd', NGN: 'ngn', GBP: 'gdp', YUAN: 'yuan' } as const;\r\n\r\nexport type Currency = typeof CURRENCY[keyof typeof CURRENCY]","import { z } from \"zod\";\r\nimport {CURRENCY} from \"../../const/const\";\r\n\r\nexport const PostTransferRequestSchema = z.object({\r\n    amount: z.number().positive(),\r\n    userId: z.string(),\r\n    recepientAccountId: z.string(),\r\n    currency: z.nativeEnum(CURRENCY)\r\n}).strict();\r\n\r\nexport type PostTransferRequest = z.infer<typeof PostTransferRequestSchema>;","export class AppError extends Error {\r\n    msg!: string;\r\n    code!: number;\r\n\r\n    constructor(msg: string, code: number) {\r\n        super(msg)\r\n\r\n        this.msg = msg;\r\n        this.code = code;\r\n    }\r\n}","import { send } from 'process';\r\nimport { Db } from '../db';\r\nimport { AppError } from '../error';\r\nimport { Account } from '../schemas/models/Account';\r\nimport { PostDepositRequest } from '../schemas/requests/postDeposit';\r\nimport { PostTransferRequest } from '../schemas/requests/postTransfer';\r\nimport { TransferFund } from '../utils';\r\n\r\nconst createAccount =\r\n  ({ db }: { db: Db }) =>\r\n  (account: Account) => {\r\n    db.Accounts.push(account);\r\n  };\r\n\r\nconst getAccountByUserId =\r\n  ({ db }: { db: Db }) =>\r\n  (userId: string) => {\r\n    const account = db.Accounts.find((x) => x.userId == userId);\r\n\r\n    if (!account) throw new AppError('User account not found', 404);\r\n\r\n    return account;\r\n  };\r\n\r\nconst makeDeposit =\r\n  ({ db }: { db: Db }) =>\r\n  ({ userId, amount, currency }: PostDepositRequest) => {\r\n    const account = db.Accounts.find((x) => x.userId == userId);\r\n\r\n    if (!account) throw new AppError('User account not found', 404);\r\n\r\n    var currencies = Object.keys(account.subwallets);\r\n\r\n    if (!currencies.includes(currency))\r\n      throw new AppError('Currency not supported', 404);\r\n\r\n    account.subwallets[currency] += amount;\r\n\r\n    return account;\r\n  };\r\n\r\nconst makeTransfer =\r\n  ({ db }: { db: Db }) =>\r\n  ({ amount, userId, recepientAccountId, currency }: PostTransferRequest) => {\r\n    let sender = db.Accounts.find((x) => x.userId == userId);\r\n\r\n    const receipentAccount = db.Accounts.find(\r\n      (x) => x.id == recepientAccountId\r\n    );\r\n\r\n    if (!sender) throw new AppError('Sender account not found', 404);\r\n\r\n    if (!receipentAccount)\r\n      throw new AppError('Receipent account not found', 404);\r\n\r\n    var response = TransferFund(sender, amount, currency);\r\n\r\n    if (response.balance > 0) {\r\n      throw new AppError('Insufficient balance', 400);\r\n    } else {\r\n      sender = response.account;\r\n\r\n      receipentAccount.subwallets[currency] += amount;\r\n    }\r\n\r\n    return sender;\r\n  };\r\n\r\nconst makeAccount = ({ db }: { db: Db }) => {\r\n  return {\r\n    createAccount: createAccount({ db }),\r\n    makeDeposit: makeDeposit({ db }),\r\n    makeTransfer: makeTransfer({ db }),\r\n    getAccountByUserId: getAccountByUserId({ db }),\r\n  };\r\n};\r\n\r\nexport default makeAccount;\r\n","import { Db } from \"../db\";\r\nimport { User } from \"../schemas/models/User\";\r\n\r\nconst addUser = ({db}: {db: Db}) => (user: User) => {\r\n    db.Users.push(user);\r\n}\r\n\r\nconst getUserById = ({db}: {db: Db}) =>(id: string) => {\r\n    return db.Users.find(x => x.id == id)\r\n}\r\n\r\nconst makeUser = ({ db }: { db: Db }) => {\r\n    return {\r\n        addUser: addUser({ db }),\r\n        getUserById: getUserById({ db }),\r\n    }\r\n}\r\n\r\nexport default makeUser","import { Db } from '../db';\r\nimport makeAccount from './account';\r\nimport makeUser from './user';\r\n\r\nconst makeRepo = ({ db }: {db: Db }) => {\r\n    return {\r\n        account: makeAccount({ db }),\r\n        user: makeUser({ db })\r\n    }\r\n}\r\n\r\nexport default makeRepo;\r\n\r\nexport type Repo = ReturnType<typeof makeRepo>","import { Account } from \"../schemas/models/Account\";\r\nimport { User } from \"../schemas/models/User\";\r\n\r\nexport type Db = {\r\n    Accounts: Account[],\r\n    Users: User[]\r\n}\r\n    \r\nexport const db: Db = {\r\n    Accounts: [],\r\n    Users: []\r\n}","import { makeApp } from \"./app\";\r\nimport makeRepo from \"./repo\";\r\nimport { db } from './db';\r\n\r\nconst PORT = 3000;\r\n\r\nconst app = makeApp({ repo: makeRepo({ db }) });\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`App running on Port ${PORT}`);\r\n});\r\n"],"mappings":"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","names":["import_express","import_express","import_zod","import_zod","import_zod","app","express","compression","helmet","cors","swaggerUi","YAML","db","makeAccount","account_default","db","makeUser","user_default","db","account_default","user_default"]}